generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DIRECT_URL")
}

model User {
  id          String   @id @default(cuid())
  username    String   @unique
  phoneNumber String?  @unique
  email       String   @unique
  role        UserRole
  classId     String?
  class       Class?   @relation("UserClass", fields: [classId], references: [id], onDelete: SetNull)
  password    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  teacher  Teacher?  @relation("TeacherUser")
  student  Student?  @relation("StudentUser")
  Planner  Planner[]
  posts    Post[]
  comments Comment[]
}

model Teacher {
  id              String   @id @default(uuid())
  firstName       String
  lastName        String
  fullName        String?
  avatarUrl       String?
  email           String   @unique
  phoneNumber     String?
  password        String?  @default("teacher1234")
  emergencyNumber String?
  subject         String[]

  userId     String       @unique
  user       User         @relation("TeacherUser", fields: [userId], references: [id], onDelete: Cascade)
  Attendance Attendance[]
  classes    Class[]      @relation("TeacherClass")
  students   Student[]
  posts      Post[]       @relation("TeacherPosts")
}

model Student {
  id              String  @id @default(uuid())
  firstName       String
  lastName        String
  email           String? @unique
  avatarUrl       String?
  phoneNumber     String?
  emergencyNumber String?
  fullName        String?
  gender          Gender? @default(male)

  classId String?
  class   Class?  @relation(fields: [classId], references: [id], onDelete: SetNull)

  teacherId String?
  teacher   Teacher? @relation(fields: [teacherId], references: [id], onDelete: SetNull)

  userId     String       @unique
  user       User         @relation("StudentUser", fields: [userId], references: [id], onDelete: Cascade)
  attendance Attendance[]
  scores     Score[]
  comments   Comment[]    @relation("StudentComments")
}

model Class {
  id        String    @id @default(uuid())
  name      String
  promoCode String?   @unique
  createdAt DateTime  @default(now())
  teacher   Teacher?  @relation("TeacherClass", fields: [teacherId], references: [id])
  teacherId String?
  students  Student[]
  users     User[]    @relation("UserClass")
  posts     Post[]
}

model Attendance {
  id        String           @id @default(uuid())
  date      DateTime         @default(now())
  status    AttendanceStatus
  studentId String
  teacherId String

  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  teacher Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@unique([studentId, teacherId, date])
}

model Score {
  id         String  @id @default(uuid())
  attendance Float
  midterm    Float
  active     Float
  exam       Float
  studentId  String  @unique
  student    Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model Planner {
  id        String   @id @default(cuid())
  title     String
  day       String?
  completed Boolean  @default(false)
  priority  String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Post {
  id        String    @id @default(cuid())
  title     String
  content   String
  imageUrl  String?
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments  Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  classId   String
  class     Class     @relation(fields: [classId], references: [id], onDelete: Cascade)
  teacher   Teacher?  @relation("TeacherPosts", fields: [teacherId], references: [id])
  teacherId String?
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  student   Student? @relation("StudentComments", fields: [studentId], references: [id])
  studentId String?
}

enum AttendanceStatus {
  present
  absent
  late
}

enum UserRole {
  teacher
  student
}

enum Gender {
  male
  female
}
