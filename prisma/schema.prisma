generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  username    String   @unique
  phoneNumber String?  @unique
  email       String   @unique
  role        UserRole
  password    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  teacher Teacher? @relation("TeacherUser")
  student Student? @relation("StudentUser")
}

model Teacher {
  id              String   @id @default(uuid())
  firstName       String
  lastName        String
  email           String   @unique
  phoneNumber     String?
  password        String?  @default("teacher1234")
  emergencyNumber String?
  subject         String[]

  userId     String       @unique
  user       User         @relation("TeacherUser", fields: [userId], references: [id], onDelete: Cascade)
  Attendance Attendance[]

  classes  Class[]   @relation("TeacherClass")
  students Student[]
}

model Student {
  id              String  @id @default(uuid())
  firstName       String
  lastName        String
  email           String? @unique
  phoneNumber     String?
  emergencyNumber String?
  gender          Gender? @default(male)

  classId String?
  class   Class?  @relation(fields: [classId], references: [id])

  teacherId String?
  teacher   Teacher? @relation(fields: [teacherId], references: [id])

  userId     String       @unique
  user       User         @relation("StudentUser", fields: [userId], references: [id], onDelete: Cascade)
  attendance Attendance[]
  scores     Score[]
}

model Class {
  id        String    @id @default(uuid())
  name      String
  promoCode String?   @unique
  createdAt DateTime  @default(now())
  teacher   Teacher?  @relation("TeacherClass", fields: [teacherId], references: [id])
  teacherId String?
  students  Student[]
}

model Attendance {
  id        String           @id @default(uuid())
  date      DateTime         @default(now())
  status    AttendanceStatus
  studentId String
  teacherId String

  student Student @relation(fields: [studentId], references: [id])
  teacher Teacher @relation(fields: [teacherId], references: [id])

  @@unique([studentId, teacherId, date])
}

model Score {
  id         String  @id @default(uuid())
  attendance Float
  midterm    Float
  active     Float
  exam       Float
  studentId  String
  student    Student @relation(fields: [studentId], references: [id])
}

enum AttendanceStatus {
  present
  absent
  late
}

enum UserRole {
  teacher
  student
}

enum Gender {
  male
  female
}
