generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  role      UserRole
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  teacherId String?  @unique
  studentId String?  @unique
  parentId  String?  @unique
  schoolId  String?  @unique
  parent    Parent?  @relation("ParentUser", fields: [parentId], references: [id])
  school    School?  @relation("SchoolUser", fields: [schoolId], references: [id])
  student   Student? @relation("StudentUser", fields: [studentId], references: [id])
  teacher   Teacher? @relation("TeacherUser", fields: [teacherId], references: [id])
}

model School {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  createdAt DateTime @default(now())
  grades    Grade[]
  user      User?    @relation("SchoolUser")
}

model Grade {
  id              String          @id @default(uuid())
  number          Int             @unique
  schoolId        String?
  school          School?         @relation(fields: [schoolId], references: [id])
  groups          Group[]
  students        Student[]
  teachers        Teacher[]
  teachingClasses TeachingClass[]
}

model Group {
  id              String          @id @default(uuid())
  name            String
  gradeId         String
  grade           Grade           @relation(fields: [gradeId], references: [id])
  students        Student[]
  teachers        Teacher[]
  teachingClasses TeachingClass[]
}

model Teacher {
  id              String          @id @default(uuid())
  firstName       String
  lastName        String
  email           String          @unique
  password        String?         @default("teacher1234")
  groupId         String?
  emergencyNumber String?
  gradeId         String?
  phoneNumber     String?
  subject         String[]
  Student         Student[]
  gradeRef        Grade?          @relation(fields: [gradeId], references: [id])
  groupRef        Group?          @relation(fields: [groupId], references: [id])
  teachingClasses TeachingClass[]
  user            User?           @relation("TeacherUser")
  Attendance      Attendance[]
}

model Student {
  id              String       @id @default(uuid())
  firstName       String
  lastName        String
  email           String?      @unique
  phoneNumber     String?
  emergencyNumber String?
  teacherId       String?
  groupId         String?
  parentId        String?
  gradeId         String?
  gender          Gender?      @default(male)
  attendance      Attendance[]
  scores          Score[]
  grade           Grade?       @relation(fields: [gradeId], references: [id])
  group           Group?       @relation(fields: [groupId], references: [id])
  parent          Parent?      @relation(fields: [parentId], references: [id])
  teacher         Teacher?     @relation(fields: [teacherId], references: [id])
  user            User?        @relation("StudentUser")
}

model Parent {
  id        String    @id @default(uuid())
  firstName String
  lastName  String
  email     String    @unique
  password  String
  students  Student[]
  user      User?     @relation("ParentUser")
}

model Semester {
  id              String          @id @default(uuid())
  name            String
  startDate       DateTime
  endDate         DateTime
  isCurrent       Boolean         @default(false)
  attendances     Attendance[]
  teachingClasses TeachingClass[]
}

model Attendance {
<<<<<<< HEAD
  id         String           @id @default(uuid())
  date       DateTime         @default(now())
  status     AttendanceStatus
  studentId  String
  teacherId  String
  semesterId String
  student    Student          @relation(fields: [studentId], references: [id])
  teacher    Teacher          @relation(fields: [teacherId], references: [id])
  semester   Semester         @relation(fields: [semesterId], references: [id])

  @@unique([studentId, teacherId, date, semesterId])
=======
  id        String           @id @default(uuid())
  date      DateTime         @default(now())
  status    AttendanceStatus
  studentId String
  teacherId String
  student   Student          @relation(fields: [studentId], references: [id])
  teacher   Teacher          @relation(fields: [teacherId], references: [id])

  @@unique([studentId, teacherId, date])
>>>>>>> 48571a11fc57c426797b7995f174f301677ab173
}

enum AttendanceStatus {
  present
  absent
  late
}

model Score {
  id         String  @id @default(uuid())
  attendance Float
  midterm    Float
  studentId  String
  active     Float
  exam       Float
  student    Student @relation(fields: [studentId], references: [id])
}

model TeachingClass {
  id         String    @id @default(uuid())
  schedule   Json?
  term       String?
  teacherId  String
  createdAt  DateTime  @default(now())
  subject    String[]
  gradeId    String
  groupId    String
  grade      Grade     @relation(fields: [gradeId], references: [id])
  group      Group     @relation(fields: [groupId], references: [id])
  teacher    Teacher   @relation(fields: [teacherId], references: [id])
  Semester   Semester? @relation(fields: [semesterId], references: [id])
  semesterId String?
}

enum UserRole {
  teacher
  student
  parent
  admin
}

enum Gender {
  male
  female
}
