generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  teacher
  student
  parent
  admin
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  role      UserRole
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model School {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  createdAt DateTime @default(now())
  grades    Grade[]
}

model Grade {
  id       String    @id @default(uuid())
  number   Int
  schoolId String
  school   School    @relation(fields: [schoolId], references: [id])
  groups   Group[]
  teachers Teacher[]
}

model Group {
  id       String    @id @default(uuid())
  name     String
  gradeId  String
  grade    Grade     @relation(fields: [gradeId], references: [id])
  students Student[]
  teachers Teacher[]
}

model Teacher {
  id              String    @id @default(uuid())
  firstName       String
  lastName        String
  email           String    @unique
  password        String    @default("teacher1234")
  groupId         String?
  gradeId         String?
  emergencyNumber String?
  phoneNumber     String?
  grade           Grade?    @relation(fields: [gradeId], references: [id])
  group           Group?    @relation(fields: [groupId], references: [id])
  students        Student[]
}

model Student {
  id              String       @id @default(uuid())
  firstName       String
  lastName        String
  email           String?      @unique
  phoneNumber     String?
  emergencyNumber String?
  teacherId       String?
  groupId         String
  parentId        String?
  attendance      Attendance[]
  scores          Score[]
  group           Group        @relation(fields: [groupId], references: [id])
  teacher         Teacher?     @relation(fields: [teacherId], references: [id])
  parent          Parent?      @relation(fields: [parentId], references: [id])
}

model Parent {
  id        String    @id @default(uuid())
  firstName String
  lastName  String
  email     String    @unique
  password  String
  students  Student[]
}

model Attendance {
  id        String   @id @default(uuid())
  date      DateTime
  present   Boolean
  studentId String
  student   Student  @relation(fields: [studentId], references: [id])
}

model Score {
  id         String  @id @default(uuid())
  exam       Float
  active     Float
  attendance Float
  midterm    Float
  studentId  String
  student    Student @relation(fields: [studentId], references: [id])
}
