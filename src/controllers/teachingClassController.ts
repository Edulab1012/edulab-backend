import { Request, Response } from "express"
import prisma from "../prisma/client"
import jwt, { TokenExpiredError } from "jsonwebtoken"

// ‚úÖ Create new class (with token check)
export const addTeachingClass = async (req: Request, res: Response) => {
    try {
        const authHeader = req.headers.authorization
        if (!authHeader || !authHeader.startsWith("Bearer")) {
            res.status(401).json({
                error: "‚ùó Token is missing. Please login and include: Bearer <token>",
            })
            return
        }

        const token = authHeader.split(" ")[1]
        const decodedToken = jwt.verify(token, process.env.JWT_SECRET as string) as {
            userId: string
            role: string
            id: string
        }

        const teacherId = decodedToken.id


        if (!teacherId) {
            res.status(400).json({ error: "Teacher ID is required" })
            return
        }
        const { subject, schedule, term, gradeId, groupId } = req.body

        const newClass = await prisma.teachingClass.create({
            data: {
                subject,
                schedule,
                term,
                teacherId,
                gradeId,
                groupId,
            },
        })
        res.status(201).json({ message: "‚úÖ Class created", teachingClass: newClass })
    } catch (error) {
        console.error("‚ùå Failed to create class:", error)
        res.status(500).json({ error: "Something went wrong" })
    }
}

// ‚úÖ Get classes by teacher
export const getClassesByTeacher = async (req: Request, res: Response) => {
    try {
        const authHeader = req.headers.authorization
        if (!authHeader || !authHeader.startsWith("Bearer")) {
            res.status(401).json({
                error: "‚ùó Token –±–∞–π—Ö–≥“Ø–π –±–∞–π–Ω–∞. –ù—ç–≤—Ç—ç—Ä—á –æ—Ä–Ω–æ —É—É.",
            })
            return
        }

        const token = authHeader.split(" ")[1]
        const decodedToken = jwt.verify(token, process.env.JWT_SECRET as string) as { id: string }
        const teacherId = decodedToken.id

        const classes = await prisma.teachingClass.findMany({
            where: { teacherId },
            orderBy: { createdAt: "desc" },
            include: {
                grade: true, // üì¶ –ê–Ω–≥–∏–π–Ω –¥—É–≥–∞–∞—Ä –∞–≤—á—Ä–∞—Ö
                group: true, // üì¶ –ë“Ø–ª–≥–∏–π–Ω –Ω—ç—Ä –∞–≤—á—Ä–∞—Ö
            }
        })

        const formatted = classes.map((cls) => ({
            id: cls.id,
            subject: cls.subject,
            schedule: cls.schedule,
            term: cls.term,
            createdAt: cls.createdAt,
            grade: cls.grade.number,  // ‚¨ÖÔ∏è –∑”©–≤—Ö”©–Ω –¥—É–≥–∞–∞—Ä—ã–≥ –∏–ª–≥—ç—ç—Ö
            group: cls.group.name     // ‚¨ÖÔ∏è –∑”©–≤—Ö”©–Ω –Ω—ç—Ä–∏–π–≥ –∏–ª–≥—ç—ç—Ö
        }))

        res.status(200).json(formatted)

    } catch (error: any) {
        if (error instanceof TokenExpiredError) {
            console.error("‚õî Token —Ö—É–≥–∞—Ü–∞–∞ –¥—É—É—Å—Å–∞–Ω")
            res.status(401).json({ error: "‚è≥ Token —Ö—É–≥–∞—Ü–∞–∞ –¥—É—É—Å—Å–∞–Ω –±–∞–π–Ω–∞. –î–∞—Ö–∏–Ω –Ω—ç–≤—Ç—ç—Ä–Ω—ç “Ø“Ø." })
            return
        }

        console.error("‚ùå –ê–Ω–≥–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª —Ç–∞—Ç–∞—Ö–∞–¥ –∞–ª–¥–∞–∞:", error)
        res.status(500).json({ error: "–°–µ—Ä–≤–µ—Ä–∏–π–Ω –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞" })
    }
}
// ‚úÖ Delete class
export const deleteTeachingClass = async (req: Request, res: Response) => {
    try {
        const authHeader = req.headers.authorization
        if (!authHeader || !authHeader.startsWith("Bearer")) {
            res.status(401).json({ error: "‚ùó Token –±–∞–π—Ö–≥“Ø–π –±–∞–π–Ω–∞. –ù—ç–≤—Ç—ç—Ä—á –æ—Ä–Ω–æ —É—É." })
            return
        }

        const token = authHeader.split(" ")[1]
        const decodedToken = jwt.verify(token, process.env.JWT_SECRET as string) as {
            id: string
        }

        const teacherId = decodedToken.id
        const { id } = req.params

        const teachingClass = await prisma.teachingClass.findUnique({ where: { id } })

        if (!teachingClass || teachingClass.teacherId !== teacherId) {
            res.status(403).json({ error: "‚õî –¢–∞ –∑”©–≤—Ö”©–Ω ”©”©—Ä–∏–π–Ω—Ö”©”© –∞–Ω–≥–∏—É–¥—ã–≥ —É—Å—Ç–≥–∞—Ö –±–æ–ª–æ–º–∂—Ç–æ–π" })
            return
        }

        await prisma.teachingClass.delete({ where: { id } })
        res.status(200).json({ message: "‚úÖ –ê–º–∂–∏–ª—Ç—Ç–∞–π —É—Å—Ç–≥–∞–ª–∞–∞" })
    } catch (error) {
        console.error("‚ùå –£—Å—Ç–≥–∞—Ö “Ø–µ–¥ –∞–ª–¥–∞–∞:", error)
        res.status(500).json({ error: "–ê–Ω–≥–∏ —É—Å—Ç–≥–∞—Ö “Ø–µ–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞" })
    }
}